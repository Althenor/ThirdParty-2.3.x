#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software; you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by the
#     Free Software Foundation; either version 2 of the License, or (at your
#     option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
# Script
#     Allwmake
#
# Description
#     Build script for ThirdParty
#
#------------------------------------------------------------------------------
# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
    echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
    echo "    The environment variables are inconsistent with the installation."
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}
. tools/makeThirdPartyFunctions
#------------------------------------------------------------------------------


# export WM settings in a form that GNU configure recognizes
[ -n "$WM_CC" ]         &&  export CC="$WM_CC"
[ -n "$WM_CXX" ]        &&  export CXX="$WM_CXX"
[ -n "$WM_CFLAGS" ]     &&  export CFLAGS="$WM_CFLAGS"
[ -n "$WM_CXXFLAGS" ]   &&  export CXXFLAGS="$WM_CXXFLAGS"
[ -n "$WM_LDFLAGS" ]    &&  export LDFLAGS="$WM_LDFLAGS"

echo
echo ==============================
echo start ThirdParty Allwmake
echo ==============================
echo
set -x

# build malloc
(
    cd malloc || exit 1
    ( cd hoard-371 && cpMakeFiles hoard )

    ./Allwmake
)


#
# compile specific mpi libraries
#
case "$WM_MPLIB" in
OPENMPI)
    if [ -r $MPI_ARCH_PATH/lib/libmpi.so ]
    then
        echo "have $WM_MPLIB shared library"
    elif [ -r $MPI_ARCH_PATH/lib/libmpi.a ]
    then
        echo "have $WM_MPLIB static library"
    else
    (
        cd $MPI_HOME || exit 1

        make distclean
        rm -rf $MPI_ARCH_PATH

        unset mpiWith
        # as of version 1.3, enable GridEngine
        if [ -n "$SGE_ROOT" ]
        then
            mpiWith="$mpiWith --with-sge"
        fi

        # Infiniband support
        # if [ -d /usr/local/ofed -a -d /usr/local/ofed/lib64 ]
        # then
        #     mpiWith="$mpiWith --with-openib=/usr/local/ofed"
        #     mpiWith="$mpiWith --with-openib-libdir=/usr/local/ofed/lib64"
        # fi

        ./configure \
            --prefix=$MPI_ARCH_PATH \
            --disable-mpirun-prefix-by-default \
            --disable-orterun-prefix-by-default \
            --enable-shared --disable-static \
            --disable-mpi-f77 --disable-mpi-f90 --disable-mpi-cxx \
            --disable-mpi-profile \
            $mpiWith \
            ;

        make
        make install
        make distclean
    )
    fi
    ;;

MPICH)
    if [ -r $MPI_ARCH_PATH/lib/libmpich.so ]
    then
        echo "have $WM_MPLIB shared library"
    elif [ -r $MPI_ARCH_PATH/lib/libmpich.a ]
    then
        echo "have $WM_MPLIB static library"
    else
    (
        cd $MPI_HOME || exit 1

        make distclean
        rm -rf $MPI_ARCH_PATH
        rm util/machines/machines.*

        ./configure \
            --without-mpe \
            --disable-f77 \
            --disable-f90 \
            --disable-f90modules \
            --disable-c++ \
            --disable-mpedbg \
            --disable-devdebug \
            --disable-debug \
            --enable-sharedlib=$MPI_ARCH_PATH/lib \
            --with-device=ch_p4 \
            -prefix=$MPI_ARCH_PATH
        make
        make install
        make distclean

        if [ -r $MPI_ARCH_PATH ]
        then
            cd $MPI_ARCH_PATH/bin
            for file in *
            do
                sed s%$MPI_ARCH_PATH%'$MPI_ARCH_PATH'%g $file > temp.$$
                mv temp.$$ $file
                chmod 0755 $file
            done

            cd $MPI_ARCH_PATH/lib

            if [ -r libmpich.so.1.0 ]
            then
                rm *.so
                ln -s libmpich.so.1.0 libmpich.so
            fi
        fi
    )
    fi
    ;;

esac


# Build Scotch decomposition
(
    cd scotch_5.1 || exit 1
    cpMakeFiles scotch src

    wmake libso src/libscotch
#    wmake libso src/libscotchmetis
)


# Build Metis decomposition
(
    cd metis-5.0pre2 || exit 1
    cpMakeFiles metis

    wmake libso GKlib
    wmake libso libmetis
)


# Build parMetis. Requires MPI!
if [ -d "$MPI_ARCH_PATH" ]
then
(
    cd ParMetis-3.1 || exit 1
    cpMakeFiles ParMetis

    # ParMetis has dependency to mpi version so
    # include mpi in build directory so .o files
    # are kept separate
    (
        WM_OPTIONS=${WM_OPTIONS}$WM_MPLIB;
        wmake libso METISLib
        wmake libso ParMETISLib
    )
)
fi


# Build ParMGridGen
(
    cd ParMGridGen-1.0 || exit 1
    cpMakeFiles ParMGridGen

    wmake libso MGridGen/IMlib
    wmake libso MGridGen/Lib
)


# Build Tecio
(
    cd tecio || exit 1
    cpMakeFiles tecio tecsrc

    wmake libso tecsrc
)



set +x
echo
echo ==============================
echo done ThirdParty Allwmake
echo ==============================
echo

# ----------------------------------------------------------------- end-of-file
