#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     Allwmake
#
# Description
#     Build script for ThirdParty
#
#------------------------------------------------------------------------------
# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
    echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
    echo "    The environment variables are inconsistent with the installation."
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}
. tools/makeThirdPartyFunctions
#------------------------------------------------------------------------------


# export WM settings in a form that GNU configure recognizes
[ -n "$WM_CC" ]         &&  export CC="$WM_CC"
[ -n "$WM_CXX" ]        &&  export CXX="$WM_CXX"
[ -n "$WM_CFLAGS" ]     &&  export CFLAGS="$WM_CFLAGS"
[ -n "$WM_CXXFLAGS" ]   &&  export CXXFLAGS="$WM_CXXFLAGS"
[ -n "$WM_LDFLAGS" ]    &&  export LDFLAGS="$WM_LDFLAGS"

echo
echo ========================================
echo Start ThirdParty Allwmake
echo ========================================
echo

echo ========================================
echo Build malloc
echo
(
    set -x
    cd malloc || exit 1
    ( cd hoard-371 && cpMakeFiles hoard )

    cpMakeFiles fbsdmalloc fbsdmalloc

    ./Allwmake
)


echo ========================================
echo Build MPI libraries if required
echo
case "$WM_MPLIB" in
OPENMPI)
    if [ -r $MPI_ARCH_PATH/lib/libmpi.so ]
    then
        echo "have $WM_MPLIB shared library"
        echo
    elif [ -r $MPI_ARCH_PATH/lib/libmpi.a ]
    then
        echo "have $WM_MPLIB static library"
        echo
    else
    (
        set -x
        cd "${MPI_ARCH_PATH##*/}" || exit 1    # change to openmpi-VERSION

        make distclean 2>/dev/null
        rm -rf $MPI_ARCH_PATH

        unset mpiWith
        # enable GridEngine if it appears to be in use
        if [ -n "$SGE_ROOT" ]
        then
            mpiWith="$mpiWith --with-sge"
        fi

        # Infiniband support
        # if [ -d /usr/local/ofed -a -d /usr/local/ofed/lib64 ]
        # then
        #     mpiWith="$mpiWith --with-openib=/usr/local/ofed"
        #     mpiWith="$mpiWith --with-openib-libdir=/usr/local/ofed/lib64"
        # fi

        ./configure \
            --prefix=$MPI_ARCH_PATH \
            --disable-mpirun-prefix-by-default \
            --disable-orterun-prefix-by-default \
            --enable-shared --disable-static \
            --disable-mpi-f77 \
            --disable-mpi-f90 \
            --disable-mpi-cxx \
            --disable-mpi-profile \
            $mpiWith \
            ;

        make
        make install
        make distclean
    )
    fi
    ;;

MPICH)
    if [ -r $MPI_ARCH_PATH/lib/libmpich.so ]
    then
        echo "have $WM_MPLIB shared library"
        echo
    elif [ -r $MPI_ARCH_PATH/lib/libmpich.a ]
    then
        echo "have $WM_MPLIB static library"
        echo
    else
    (
        set -x
        cd $MPI_HOME || exit 1    # change to mpich-VERSION

        make distclean 2>/dev/null
        rm -rf $MPI_ARCH_PATH
        rm util/machines/machines.*

        ./configure \
            --prefix=$MPI_ARCH_PATH \
            --without-mpe \
            --disable-f77 \
            --disable-f90 \
            --disable-f90modules \
            --disable-c++ \
            --disable-mpedbg \
            --disable-devdebug \
            --disable-debug \
            --enable-sharedlib=$MPI_ARCH_PATH/lib \
            --with-device=ch_p4 \
            ;

        make
        make install
        make distclean

        if [ -r $MPI_ARCH_PATH ]
        then
            cd $MPI_ARCH_PATH/bin
            for file in *
            do
                sed s%$MPI_ARCH_PATH%'$MPI_ARCH_PATH'%g $file > temp.$$
                mv temp.$$ $file
                chmod 0755 $file
            done

            cd $MPI_ARCH_PATH/lib

            if [ -r libmpich.so.1.0 ]
            then
                rm *.so
                ln -s libmpich.so.1.0 libmpich.so
            fi
        fi
    )
    fi
    ;;

esac


# get SCOTCH_VERSION, SCOTCH_ARCH_PATH
settings=`$WM_PROJECT_DIR/bin/foamEtcFile apps/scotch/bashrc`
if [ -f "$settings" ]
then
    . $settings
else
    echo
    echo "Error: no apps/scotch/bashrc settings"
    echo
fi

# building scotch is still a bit of a pain
echo ========================================
echo "Build Scotch decomposition library $SCOTCH_VERSION"
echo "    $SCOTCH_ARCH_PATH"

if [ -f $SCOTCH_ARCH_PATH/include/scotch.h \
  -a -r $FOAM_LIBBIN/libscotch.so \
  -a -r $FOAM_LIBBIN/libscotcherrexit.so ]
then
    echo "have scotch shared libraries and scotch.h"
    echo
elif [ -f $SCOTCH_ARCH_PATH/include/scotch.h \
    -a -r $SCOTCH_ARCH_PATH/lib/libscotch.so \
    -a -r $SCOTCH_ARCH_PATH/lib/libscotcherrexit.so ]
then
(
    echo "have scotch.h in $SCOTCH_ARCH_PATH/include"
    echo "have scotch shared libraries in $SCOTCH_ARCH_PATH/lib"
    set -x
    mkdir -p $FOAM_LIBBIN 2>/dev/null
    cp  $SCOTCH_ARCH_PATH/lib/libscotch.so \
        $SCOTCH_ARCH_PATH/lib/libscotcherrexit.so \
        $FOAM_LIBBIN
)
else
(
    set -x
    cd $SCOTCH_VERSION/src || exit 1
    mkdir -p $FOAM_LIBBIN 2>/dev/null
    mkdir -p $SCOTCH_ARCH_PATH 2>/dev/null

    make realclean 2>/dev/null

    # this needs generalizing
    makeFile=../../wmakeFiles/scotch/Makefile.inc.i686_pc_linux2.shlib-OpenFOAM

    if [ -f $makeFile -a ! -f Makefile.inc ]
    then
        rm -f Makefile.inc
        ln -s $makeFile Makefile.inc
    fi

    [ -f Makefile.inc ] || {
        echo " Error: scotch needs an appropriate Makefile.inc"
        exit 1
    }

    makeArgs="prefix=$SCOTCH_ARCH_PATH"
    # handle non-gcc compilers
    if [ "${WM_CC:-gcc}" != "gcc" ]
    then
        makeArgs="$makeArgs CC=$WM_CC CCS=$WM_CC"
    fi

    make $makeArgs scotch install && \
    cp  $SCOTCH_ARCH_PATH/lib/libscotch.so \
        $SCOTCH_ARCH_PATH/lib/libscotcherrexit.so \
        $FOAM_LIBBIN
)
fi
# verify existence of scotch include
[ -f $SCOTCH_ARCH_PATH/include/scotch.h ] || {
    echo
    echo "    WARNING: required include file 'scotch.h' not found!"
    echo
}


# build ptscotch if MPI (ThirdParty or system) is available
if [ -d "$MPI_ARCH_PATH" -o "$WM_MPLIB" != "${WM_MPLIB#SYSTEM}" ]
then
    echo ========================================
    echo "Build PTScotch decomposition library $SCOTCH_VERSION (uses MPI)"
    echo "    $SCOTCH_ARCH_PATH"
    echo

    if [ -f $SCOTCH_ARCH_PATH/include/ptscotch.h \
      -a -r $FOAM_MPI_LIBBIN/libptscotch.so \
      -a -r $FOAM_MPI_LIBBIN/libptscotcherrexit.so ]
    then
        echo "have ptscotch shared libraries and ptscotch.h"
        echo
    elif [ -f $SCOTCH_ARCH_PATH/include/ptscotch.h \
        -a -r $SCOTCH_ARCH_PATH/lib/libptscotch.so \
        -a -r $SCOTCH_ARCH_PATH/lib/libptscotcherrexit.so ]
    then
    (
        echo "have ptscotch.h in $SCOTCH_ARCH_PATH/include"
        echo "have ptscotch shared libraries in $SCOTCH_ARCH_PATH/lib"
        set -x
        mkdir -p $FOAM_MPI_LIBBIN 2>/dev/null

        cp  $SCOTCH_ARCH_PATH/lib/libptscotch.so \
            $SCOTCH_ARCH_PATH/lib/libptscotcherrexit.so \
            $FOAM_MPI_LIBBIN
    )
    else
    (
        set -x
        cd $SCOTCH_VERSION/src || exit 1
        mkdir -p $FOAM_MPI_LIBBIN 2>/dev/null
        mkdir -p $SCOTCH_ARCH_PATH 2>/dev/null

        [ -f Makefile.inc ] || {
            echo " Error: scotch needs an appropriate Makefile.inc"
            exit 1
        }

        makeArgs="prefix=$SCOTCH_ARCH_PATH"
        # handle non-gcc compilers
        if [ "${WM_CC:-gcc}" != "gcc" ]
        then
            makeArgs="$makeArgs CC=$WM_CC CCS=$WM_CC"
        fi

        make $makeArgs ptscotch install && \
        cp  $SCOTCH_ARCH_PATH/lib/libptscotch.so \
            $SCOTCH_ARCH_PATH/lib/libptscotcherrexit.so \
            $FOAM_MPI_LIBBIN
    )
    fi
    # verify existence of scotch include
    [ -f $SCOTCH_ARCH_PATH/include/ptscotch.h ] || {
        echo
        echo "    WARNING: required include file 'ptscotch.h' not found!"
        echo
    }
fi


echo ========================================
echo Build Metis decomposition
echo
(
    set -x
    cd metis-5.0pre2 || exit 1
    cpMakeFiles metis/GKlib GKlib
    cpMakeFiles metis/libmetis libmetis

    wmake libso GKlib
    wmake libso libmetis
)


# build ParMetis if MPI (ThirdParty or system) is available
if [ -d "$MPI_ARCH_PATH" -o "$WM_MPLIB" != "${WM_MPLIB#SYSTEM}" ]
then
(
    echo ========================================
    echo "Build ParMetis decomposition (uses MPI)"
    echo

    set -x
    cd ParMetis-3.1 || exit 1

    cpMakeFiles ParMetis/METISLib METISLib
    cpMakeFiles ParMetis/ParMETISLib ParMETISLib

    # force compilation into qualified directory
    WM_OPTIONS="$WM_OPTIONS$WM_MPLIB"

    wmake libso METISLib
    wmake libso ParMETISLib
)
fi


echo ========================================
echo Build ParMGridGen
echo
(
    set -x
    cd ParMGridGen-1.0 || exit 1
    cpMakeFiles ParMGridGen/MGridGen/IMlib MGridGen/IMlib
    cpMakeFiles ParMGridGen/MGridGen/Lib MGridGen/Lib

    wmake libso MGridGen/IMlib
    wmake libso MGridGen/Lib
)


echo ========================================
echo Build Tecio
echo
(
    set -x
    cd tecio || exit 1
    cpMakeFiles tecio

    wmake libso tecsrc
)


echo ========================================
echo Build coco - C++ version
echo
prefixDIR=$installBASE/coco-cpp
if [ -r $prefixDIR/bin/coco-cpp ]
then
    echo "have coco-cpp binary"
else
(
    set -x
    cd coco-cpp || exit 1

    make distclean 2>/dev/null

    ./configure \
        --prefix=$prefixDIR

    make
    make install
    make distclean
)
fi

echo
echo ========================================
echo Done ThirdParty Allwmake
echo ========================================
echo


# ----------------------------------------------------------------- end-of-file
